
#ifndef __LTMEMTRACK_H__
#define __LTMEMTRACK_H__

// file name size to save for memory tracking
#define CMEMTRACKFILENAMESIZE 64

///////////////////////////////////////////////////////////////////////////////////////////
// struct to hold translation information for strings to data types
///////////////////////////////////////////////////////////////////////////////////////////
struct CMemTrackTypeToString
{
	//the type ID of this
	uint32 m_nType;

	//the string name that this is referenced by
	char* m_sName;

	//the next item in our linked list
	CMemTrackTypeToString* m_pNext;

	//temporary variable used to count how much memory is being used
	uint32 m_nMemoryAllocated;
	
	//temporary variable counting the number of allocations
	uint32 m_nNumAllocations;
};


///////////////////////////////////////////////////////////////////////////////////////////
// struct to hold information about the current allocation
///////////////////////////////////////////////////////////////////////////////////////////
struct CMemTrackAllocInfo
{
	enum 
	{ 
		k_nFlag_Marked = (1<<0), 
		k_nFlag_Ignore = (1<<1) 
	};

	CMemTrackAllocInfo() :
		m_nFlags(0)
	{}

	//the allocation number (starts at 0, and increases each allocation)
	uint32	m_nAllocCount;

	//the amount of memory requested by the allocation
	uint32	m_nRequestedSize;

	//the actual size of the allocation
	uint32	m_nActualSize;

	//the category of memory this belongs to
	uint32	m_nAllocationType;

	//a pointer to the actual memory block
	void*	m_pMem;

	//the line number this allocation was called from
	uint32	m_nLineNum;

	//flags for this allocation
	uint32	m_nFlags;

	//the filename that this allocation was called from
	char	m_sFileName[CMEMTRACKFILENAMESIZE];

	//doubly linked list nodes
	CMemTrackAllocInfo* m_pNext;
	CMemTrackAllocInfo* m_pPrev;

};


///////////////////////////////////////////////////////////////////////////////////////////
// information about the current allocation
///////////////////////////////////////////////////////////////////////////////////////////
extern CMemTrackAllocInfo g_curAllocInfo;


///////////////////////////////////////////////////////////////////////////////////////////
// information about the current allocation information depth
// if this is 0 then the information is not valid
///////////////////////////////////////////////////////////////////////////////////////////
extern uint32 g_nCurMemTrackAllocInfoDepth;


///////////////////////////////////////////////////////////////////////////////////////////
// number of calls to alloc counter
///////////////////////////////////////////////////////////////////////////////////////////
extern uint32 g_nMemTrackAllocationCount;


///////////////////////////////////////////////////////////////////////////////////////////
// number of calls to free counter
///////////////////////////////////////////////////////////////////////////////////////////
extern uint32 g_nMemTrackFreeCount;


///////////////////////////////////////////////////////////////////////////////////////////
// list to hold translation information for strings to data types
///////////////////////////////////////////////////////////////////////////////////////////
extern CMemTrackTypeToString* g_pLTMemTrackTypeToStringList;


///////////////////////////////////////////////////////////////////////////////////////////
// current total amount of memory allocated based on memory requested
///////////////////////////////////////////////////////////////////////////////////////////
extern uint32 g_nMemTrackTotalAllocated;

///////////////////////////////////////////////////////////////////////////////////////////
// the maximum amount of memory we have had allocated over the course of this run
///////////////////////////////////////////////////////////////////////////////////////////
extern uint32 g_nMemTrackPeakMemAllocated;

///////////////////////////////////////////////////////////////////////////////////////////
// the maximum number of allocations we have had at once during this run
///////////////////////////////////////////////////////////////////////////////////////////
extern uint32 g_nMemTrackPeakAllocations;

///////////////////////////////////////////////////////////////////////////////////////////
// pointer to list of all track information headers for all memory allocated
///////////////////////////////////////////////////////////////////////////////////////////
extern CMemTrackAllocInfo* g_pTrackHeap;


///////////////////////////////////////////////////////////////////////////////////////////
// number of allocations for each type of memory
///////////////////////////////////////////////////////////////////////////////////////////
extern uint32 g_nMemTypeTrackAllocationCount[];


void LTMemTrackInit();

void LTMemTrackSetupMemTypesToStrings();

void LTMemTrackTerm();

void* LTMemTrackAlloc(uint32 nRequestedSize);

void LTMemTrackFree(void* pMem);

void* LTMemTrackReAlloc(void* pMemOld, uint32 nRequestedSize);

uint32 LTMemTrackGetSize(void* pMem);

void LTMemTrackPrintStats();

void LTMemLog(uint32 nArgC, char** ppArgV);

void LTMemFullLog(uint32 nArgC, char** ppArgV);

void LTMemTrackAddTypeToString(uint32 nType, const char* sName);

CMemTrackTypeToString* LTMemTrackGetPointerFromType(uint32 nType);

#endif
